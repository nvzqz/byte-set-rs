on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: CI

jobs:
  rust-check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
    steps:
      # Checkout
      - uses: actions/checkout@v1

      # Install
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # Cache
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target dir
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ matrix.target }}-cargo-target-check-${{ hashFiles('**/Cargo.lock') }}

      # Run
      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --target ${{ matrix.target }}

  # Benchmarks are only checked on 64-bit because:
  # - They're not architecture dependent
  # - Criterion fails to build on 32-bit
  rust-check-benches:
    name: Check Benchmarks
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v1

      # Install
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target dir
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-check-benches-${{ hashFiles('**/Cargo.lock') }}

      # Run
      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: -p benches

  rust-test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
    steps:
      # Checkout
      - uses: actions/checkout@v1

      # Install
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # Cache
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target dir
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ matrix.target }}-cargo-target-test-${{ hashFiles('**/Cargo.lock') }}

      # Run
      - name: Cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target ${{ matrix.target }}

  rust-fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      # Install
      - uses: actions/checkout@v1
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Run
      - run: rustup component add rustfmt
      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  rust-clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v1

      # Install
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target dir
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-clippy-${{ hashFiles('**/Cargo.lock') }}

      # Run
      - run: rustup component add clippy
      - name: Cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  rust-doc:
    name: Doc
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v1

      # Install
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      # Cache
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target dir
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-doc-${{ hashFiles('**/Cargo.lock') }}

      # Run
      - name: Cargo doc
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -D warnings
        with:
          command: doc
          args: --no-deps
